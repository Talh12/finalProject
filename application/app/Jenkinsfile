pipeline {
    agent {
        kubernetes {
            label 'jenkins-agent'
            yamlFile 'application/jenkins-agent.yaml'
            defaultContainer 'dind'
        }
    }

    environment {
        DOCKER_IMAGE = 'tal5041996/weather-app'
        DOCKERHUB_CREDENTIALS = 'docker-cred'
        GITHUB_CREDENTIALS = 'tal-github'
        DOCKER_TAG = 'latest'
        FEATURE_BRANCH = 'feature'
        REPO_URL = 'https://github.com/Talh12/finalProject.git'
        APPLICATION_DIR = 'application'
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f ${APPLICATION_DIR}/Dockerfile ${APPLICATION_DIR}")
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh "docker-compose -f ${APPLICATION_DIR}/docker-compose.yaml up --build --abort-on-container-exit"
                }
            }
        }

        stage('Check and Push Changes to Feature Branch') {
            steps {
                script {
                    // Configure Git user info
                    sh 'git config --global --add safe.directory /home/jenkins/agent/workspace/weather-app'
                    sh 'git config --global user.email "halias32236@gmail.com"'
                    sh 'git config --global user.name "Talh12"'

                    // Fetch changes from the remote repository
                    sh 'git fetch origin "+refs/heads/*:refs/remotes/origin/*"'

                    // Checkout the feature branch
                    sh 'git checkout ${FEATURE_BRANCH}'

                    // Add all changes
                    sh 'git add -A'

                    // Print Git status for debugging
                    sh 'git status'

                    // Commit changes
                    sh 'git commit -m "automated commit by Jenkins"'

                    // Push changes to the remote repository
                    sh 'git push origin ${FEATURE_BRANCH}'
                }
            }
        }
    }

    post {
        always {
            script {
                currentBuild.result = 'SUCCESS'
            }
        }
    }
}
