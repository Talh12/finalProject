pipeline {
    agent {
        kubernetes {
            label 'jenkins-agent'
            yamlFile 'application/jenkins-agent.yaml'
            defaultContainer 'dind'
        }
    }

    environment {
        DOCKER_IMAGE = 'tal5041996/weather-app'
        DOCKERHUB_CREDENTIALS = 'docker-cred'
        GITHUB_CREDENTIALS = 'tal-github'
        DOCKER_TAG = 'latest'
        FEATURE_BRANCH = 'feature'
        REPO_URL = 'https://github.com/Talh12/finalProject.git'
        APPLICATION_DIR = 'application'
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f ${APPLICATION_DIR}/Dockerfile ${APPLICATION_DIR}")
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh "docker-compose -f ${APPLICATION_DIR}/docker-compose.yaml up --build --abort-on-container-exit"
                }
            }
        }

        stage('Check and Push Changes to Feature Branch') {
            steps {
                script {
                    sh """
                    git config --global --add safe.directory /home/jenkins/agent/workspace/weather-app
                    git config --global user.email "halias32236@gmail.com"
                    git config --global user.name "Talh12"
                    git fetch origin '+refs/heads/*:refs/remotes/origin/*'
                    
                    # Check if feature branch exists locally
                    if git show-ref --quiet refs/heads/${FEATURE_BRANCH}; then
                        echo "Branch ${FEATURE_BRANCH} exists locally."
                    else
                        echo "Branch ${FEATURE_BRANCH} does not exist locally. Creating branch."
                        git checkout -b ${FEATURE_BRANCH} origin/${FEATURE_BRANCH} || git checkout -b ${FEATURE_BRANCH}
                    fi
                    
                    # Switch to feature branch
                    git checkout ${FEATURE_BRANCH}

                    # Ensure the local branch is up-to-date
                    git pull origin ${FEATURE_BRANCH}

                    # Force add all files to the staging area
                    git add -A

                    # Check for changes and push if any
                    if [ -n "\$(git status --porcelain)" ]; then
                        git commit -m "Update ${FEATURE_BRANCH} by Jenkins"
                        git push origin ${FEATURE_BRANCH}
                    else
                        echo "No changes to commit."
                    fi
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                currentBuild.result = 'SUCCESS'
            }
        }
    }
}
